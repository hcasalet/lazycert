// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lc.proto

package lc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogStatus int32

const (
	LogStatus_CERTIFIED LogStatus = 0
	LogStatus_WAITING   LogStatus = 1
	LogStatus_ROLLBACK  LogStatus = 2
)

var LogStatus_name = map[int32]string{
	0: "CERTIFIED",
	1: "WAITING",
	2: "ROLLBACK",
}

var LogStatus_value = map[string]int32{
	"CERTIFIED": 0,
	"WAITING":   1,
	"ROLLBACK":  2,
}

func (x LogStatus) String() string {
	return proto.EnumName(LogStatus_name, int32(x))
}

func (LogStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{0}
}

type ResponseStatus int32

const (
	ResponseStatus_ERROR   ResponseStatus = 0
	ResponseStatus_SUCCESS ResponseStatus = 1
)

var ResponseStatus_name = map[int32]string{
	0: "ERROR",
	1: "SUCCESS",
}

var ResponseStatus_value = map[string]int32{
	"ERROR":   0,
	"SUCCESS": 1,
}

func (x ResponseStatus) String() string {
	return proto.EnumName(ResponseStatus_name, int32(x))
}

func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{1}
}

type HeartBeatInfo struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartBeatInfo) Reset()         { *m = HeartBeatInfo{} }
func (m *HeartBeatInfo) String() string { return proto.CompactTextString(m) }
func (*HeartBeatInfo) ProtoMessage()    {}
func (*HeartBeatInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{0}
}

func (m *HeartBeatInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartBeatInfo.Unmarshal(m, b)
}
func (m *HeartBeatInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartBeatInfo.Marshal(b, m, deterministic)
}
func (m *HeartBeatInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeatInfo.Merge(m, src)
}
func (m *HeartBeatInfo) XXX_Size() int {
	return xxx_messageInfo_HeartBeatInfo.Size(m)
}
func (m *HeartBeatInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeatInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeatInfo proto.InternalMessageInfo

type EdgeNodeConfig struct {
	PublicKey            *PublicKey `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Node                 *NodeInfo  `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	TermID               int32      `protobuf:"varint,3,opt,name=termID,proto3" json:"termID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *EdgeNodeConfig) Reset()         { *m = EdgeNodeConfig{} }
func (m *EdgeNodeConfig) String() string { return proto.CompactTextString(m) }
func (*EdgeNodeConfig) ProtoMessage()    {}
func (*EdgeNodeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{1}
}

func (m *EdgeNodeConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EdgeNodeConfig.Unmarshal(m, b)
}
func (m *EdgeNodeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EdgeNodeConfig.Marshal(b, m, deterministic)
}
func (m *EdgeNodeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeNodeConfig.Merge(m, src)
}
func (m *EdgeNodeConfig) XXX_Size() int {
	return xxx_messageInfo_EdgeNodeConfig.Size(m)
}
func (m *EdgeNodeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeNodeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeNodeConfig proto.InternalMessageInfo

func (m *EdgeNodeConfig) GetPublicKey() *PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *EdgeNodeConfig) GetNode() *NodeInfo {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *EdgeNodeConfig) GetTermID() int32 {
	if m != nil {
		return m.TermID
	}
	return 0
}

type RegistrationConfig struct {
	TePublicKey          *PublicKey    `protobuf:"bytes,1,opt,name=tePublicKey,proto3" json:"tePublicKey,omitempty"`
	ClusterLeader        *LeaderConfig `protobuf:"bytes,2,opt,name=clusterLeader,proto3" json:"clusterLeader,omitempty"`
	LogPosition          int32         `protobuf:"varint,3,opt,name=logPosition,proto3" json:"logPosition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RegistrationConfig) Reset()         { *m = RegistrationConfig{} }
func (m *RegistrationConfig) String() string { return proto.CompactTextString(m) }
func (*RegistrationConfig) ProtoMessage()    {}
func (*RegistrationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{2}
}

func (m *RegistrationConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationConfig.Unmarshal(m, b)
}
func (m *RegistrationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationConfig.Marshal(b, m, deterministic)
}
func (m *RegistrationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationConfig.Merge(m, src)
}
func (m *RegistrationConfig) XXX_Size() int {
	return xxx_messageInfo_RegistrationConfig.Size(m)
}
func (m *RegistrationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationConfig proto.InternalMessageInfo

func (m *RegistrationConfig) GetTePublicKey() *PublicKey {
	if m != nil {
		return m.TePublicKey
	}
	return nil
}

func (m *RegistrationConfig) GetClusterLeader() *LeaderConfig {
	if m != nil {
		return m.ClusterLeader
	}
	return nil
}

func (m *RegistrationConfig) GetLogPosition() int32 {
	if m != nil {
		return m.LogPosition
	}
	return 0
}

type LeaderConfig struct {
	ID                   string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TermID               int32      `protobuf:"varint,2,opt,name=termID,proto3" json:"termID,omitempty"`
	Node                 *NodeInfo  `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	LeaderPubKey         *PublicKey `protobuf:"bytes,4,opt,name=leaderPubKey,proto3" json:"leaderPubKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LeaderConfig) Reset()         { *m = LeaderConfig{} }
func (m *LeaderConfig) String() string { return proto.CompactTextString(m) }
func (*LeaderConfig) ProtoMessage()    {}
func (*LeaderConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{3}
}

func (m *LeaderConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaderConfig.Unmarshal(m, b)
}
func (m *LeaderConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaderConfig.Marshal(b, m, deterministic)
}
func (m *LeaderConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaderConfig.Merge(m, src)
}
func (m *LeaderConfig) XXX_Size() int {
	return xxx_messageInfo_LeaderConfig.Size(m)
}
func (m *LeaderConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaderConfig.DiscardUnknown(m)
}

var xxx_messageInfo_LeaderConfig proto.InternalMessageInfo

func (m *LeaderConfig) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *LeaderConfig) GetTermID() int32 {
	if m != nil {
		return m.TermID
	}
	return 0
}

func (m *LeaderConfig) GetNode() *NodeInfo {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *LeaderConfig) GetLeaderPubKey() *PublicKey {
	if m != nil {
		return m.LeaderPubKey
	}
	return nil
}

type ProposeData struct {
	Header               *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	LogBlock             *BlockInfo `protobuf:"bytes,2,opt,name=logBlock,proto3" json:"logBlock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProposeData) Reset()         { *m = ProposeData{} }
func (m *ProposeData) String() string { return proto.CompactTextString(m) }
func (*ProposeData) ProtoMessage()    {}
func (*ProposeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{4}
}

func (m *ProposeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposeData.Unmarshal(m, b)
}
func (m *ProposeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposeData.Marshal(b, m, deterministic)
}
func (m *ProposeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeData.Merge(m, src)
}
func (m *ProposeData) XXX_Size() int {
	return xxx_messageInfo_ProposeData.Size(m)
}
func (m *ProposeData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeData.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeData proto.InternalMessageInfo

func (m *ProposeData) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ProposeData) GetLogBlock() *BlockInfo {
	if m != nil {
		return m.LogBlock
	}
	return nil
}

type PrepareAck struct {
	Prepare              *ProposeData `protobuf:"bytes,1,opt,name=prepare,proto3" json:"prepare,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PrepareAck) Reset()         { *m = PrepareAck{} }
func (m *PrepareAck) String() string { return proto.CompactTextString(m) }
func (*PrepareAck) ProtoMessage()    {}
func (*PrepareAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{5}
}

func (m *PrepareAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareAck.Unmarshal(m, b)
}
func (m *PrepareAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareAck.Marshal(b, m, deterministic)
}
func (m *PrepareAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareAck.Merge(m, src)
}
func (m *PrepareAck) XXX_Size() int {
	return xxx_messageInfo_PrepareAck.Size(m)
}
func (m *PrepareAck) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareAck.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareAck proto.InternalMessageInfo

func (m *PrepareAck) GetPrepare() *ProposeData {
	if m != nil {
		return m.Prepare
	}
	return nil
}

type Dummy struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dummy) Reset()         { *m = Dummy{} }
func (m *Dummy) String() string { return proto.CompactTextString(m) }
func (*Dummy) ProtoMessage()    {}
func (*Dummy) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{6}
}

func (m *Dummy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dummy.Unmarshal(m, b)
}
func (m *Dummy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dummy.Marshal(b, m, deterministic)
}
func (m *Dummy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dummy.Merge(m, src)
}
func (m *Dummy) XXX_Size() int {
	return xxx_messageInfo_Dummy.Size(m)
}
func (m *Dummy) XXX_DiscardUnknown() {
	xxx_messageInfo_Dummy.DiscardUnknown(m)
}

var xxx_messageInfo_Dummy proto.InternalMessageInfo

type PublicKey struct {
	RawPublicKey         []byte   `protobuf:"bytes,1,opt,name=rawPublicKey,proto3" json:"rawPublicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicKey) Reset()         { *m = PublicKey{} }
func (m *PublicKey) String() string { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()    {}
func (*PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{7}
}

func (m *PublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicKey.Unmarshal(m, b)
}
func (m *PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicKey.Marshal(b, m, deterministic)
}
func (m *PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKey.Merge(m, src)
}
func (m *PublicKey) XXX_Size() int {
	return xxx_messageInfo_PublicKey.Size(m)
}
func (m *PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKey proto.InternalMessageInfo

func (m *PublicKey) GetRawPublicKey() []byte {
	if m != nil {
		return m.RawPublicKey
	}
	return nil
}

type Data struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{8}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

//message Accept {
//Header header = 1;
//BlockInfo block = 2;
////    bytes signature = 3;
//}
type AcceptMsg struct {
	Header               *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AcceptHash           []byte     `protobuf:"bytes,2,opt,name=acceptHash,proto3" json:"acceptHash,omitempty"`
	Signature            []byte     `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Block                *BlockInfo `protobuf:"bytes,4,opt,name=block,proto3" json:"block,omitempty"`
	TermID               int32      `protobuf:"varint,5,opt,name=termID,proto3" json:"termID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AcceptMsg) Reset()         { *m = AcceptMsg{} }
func (m *AcceptMsg) String() string { return proto.CompactTextString(m) }
func (*AcceptMsg) ProtoMessage()    {}
func (*AcceptMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{9}
}

func (m *AcceptMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcceptMsg.Unmarshal(m, b)
}
func (m *AcceptMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcceptMsg.Marshal(b, m, deterministic)
}
func (m *AcceptMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptMsg.Merge(m, src)
}
func (m *AcceptMsg) XXX_Size() int {
	return xxx_messageInfo_AcceptMsg.Size(m)
}
func (m *AcceptMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptMsg.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptMsg proto.InternalMessageInfo

func (m *AcceptMsg) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AcceptMsg) GetAcceptHash() []byte {
	if m != nil {
		return m.AcceptHash
	}
	return nil
}

func (m *AcceptMsg) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *AcceptMsg) GetBlock() *BlockInfo {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *AcceptMsg) GetTermID() int32 {
	if m != nil {
		return m.TermID
	}
	return 0
}

type Header struct {
	Node                 *NodeInfo `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{10}
}

func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetNode() *NodeInfo {
	if m != nil {
		return m.Node
	}
	return nil
}

type BlockInfo struct {
	LogID                int32     `protobuf:"varint,1,opt,name=logID,proto3" json:"logID,omitempty"`
	Data                 []*KeyVal `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BlockInfo) Reset()         { *m = BlockInfo{} }
func (m *BlockInfo) String() string { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()    {}
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{11}
}

func (m *BlockInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockInfo.Unmarshal(m, b)
}
func (m *BlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockInfo.Marshal(b, m, deterministic)
}
func (m *BlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockInfo.Merge(m, src)
}
func (m *BlockInfo) XXX_Size() int {
	return xxx_messageInfo_BlockInfo.Size(m)
}
func (m *BlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlockInfo proto.InternalMessageInfo

func (m *BlockInfo) GetLogID() int32 {
	if m != nil {
		return m.LogID
	}
	return 0
}

func (m *BlockInfo) GetData() []*KeyVal {
	if m != nil {
		return m.Data
	}
	return nil
}

type KeyVal struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyVal) Reset()         { *m = KeyVal{} }
func (m *KeyVal) String() string { return proto.CompactTextString(m) }
func (*KeyVal) ProtoMessage()    {}
func (*KeyVal) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{12}
}

func (m *KeyVal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyVal.Unmarshal(m, b)
}
func (m *KeyVal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyVal.Marshal(b, m, deterministic)
}
func (m *KeyVal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyVal.Merge(m, src)
}
func (m *KeyVal) XXX_Size() int {
	return xxx_messageInfo_KeyVal.Size(m)
}
func (m *KeyVal) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyVal.DiscardUnknown(m)
}

var xxx_messageInfo_KeyVal proto.InternalMessageInfo

func (m *KeyVal) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyVal) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type ReadResponse struct {
	Data                 *KeyVal        `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Status               ResponseStatus `protobuf:"varint,2,opt,name=status,proto3,enum=lc.ResponseStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReadResponse) Reset()         { *m = ReadResponse{} }
func (m *ReadResponse) String() string { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()    {}
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{13}
}

func (m *ReadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadResponse.Unmarshal(m, b)
}
func (m *ReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadResponse.Marshal(b, m, deterministic)
}
func (m *ReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadResponse.Merge(m, src)
}
func (m *ReadResponse) XXX_Size() int {
	return xxx_messageInfo_ReadResponse.Size(m)
}
func (m *ReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadResponse proto.InternalMessageInfo

func (m *ReadResponse) GetData() *KeyVal {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_ERROR
}

type CommitData struct {
	Data                 []*KeyVal `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CommitData) Reset()         { *m = CommitData{} }
func (m *CommitData) String() string { return proto.CompactTextString(m) }
func (*CommitData) ProtoMessage()    {}
func (*CommitData) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{14}
}

func (m *CommitData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitData.Unmarshal(m, b)
}
func (m *CommitData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitData.Marshal(b, m, deterministic)
}
func (m *CommitData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitData.Merge(m, src)
}
func (m *CommitData) XXX_Size() int {
	return xxx_messageInfo_CommitData.Size(m)
}
func (m *CommitData) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitData.DiscardUnknown(m)
}

var xxx_messageInfo_CommitData proto.InternalMessageInfo

func (m *CommitData) GetData() []*KeyVal {
	if m != nil {
		return m.Data
	}
	return nil
}

type Certificate struct {
	LogID                int32    `protobuf:"varint,1,opt,name=logID,proto3" json:"logID,omitempty"`
	AcceptHash           []byte   `protobuf:"bytes,2,opt,name=acceptHash,proto3" json:"acceptHash,omitempty"`
	TeSignature          []byte   `protobuf:"bytes,3,opt,name=teSignature,proto3" json:"teSignature,omitempty"`
	Votes                []*Vote  `protobuf:"bytes,4,rep,name=votes,proto3" json:"votes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{15}
}

func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Certificate.Unmarshal(m, b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return xxx_messageInfo_Certificate.Size(m)
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetLogID() int32 {
	if m != nil {
		return m.LogID
	}
	return 0
}

func (m *Certificate) GetAcceptHash() []byte {
	if m != nil {
		return m.AcceptHash
	}
	return nil
}

func (m *Certificate) GetTeSignature() []byte {
	if m != nil {
		return m.TeSignature
	}
	return nil
}

func (m *Certificate) GetVotes() []*Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

type ViewInfo struct {
	Leader               *NodeInfo `protobuf:"bytes,1,opt,name=leader,proto3" json:"leader,omitempty"`
	ViewID               int32     `protobuf:"varint,3,opt,name=viewID,proto3" json:"viewID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ViewInfo) Reset()         { *m = ViewInfo{} }
func (m *ViewInfo) String() string { return proto.CompactTextString(m) }
func (*ViewInfo) ProtoMessage()    {}
func (*ViewInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{16}
}

func (m *ViewInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ViewInfo.Unmarshal(m, b)
}
func (m *ViewInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ViewInfo.Marshal(b, m, deterministic)
}
func (m *ViewInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewInfo.Merge(m, src)
}
func (m *ViewInfo) XXX_Size() int {
	return xxx_messageInfo_ViewInfo.Size(m)
}
func (m *ViewInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ViewInfo proto.InternalMessageInfo

func (m *ViewInfo) GetLeader() *NodeInfo {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *ViewInfo) GetViewID() int32 {
	if m != nil {
		return m.ViewID
	}
	return 0
}

type NodeInfo struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{17}
}

func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *NodeInfo) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type TEBlock struct {
	LogID                int32        `protobuf:"varint,1,opt,name=logID,proto3" json:"logID,omitempty"`
	AcceptHash           []byte       `protobuf:"bytes,2,opt,name=acceptHash,proto3" json:"acceptHash,omitempty"`
	TeSignature          []byte       `protobuf:"bytes,3,opt,name=teSignature,proto3" json:"teSignature,omitempty"`
	AcceptMsgs           []*AcceptMsg `protobuf:"bytes,4,rep,name=acceptMsgs,proto3" json:"acceptMsgs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TEBlock) Reset()         { *m = TEBlock{} }
func (m *TEBlock) String() string { return proto.CompactTextString(m) }
func (*TEBlock) ProtoMessage()    {}
func (*TEBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{18}
}

func (m *TEBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TEBlock.Unmarshal(m, b)
}
func (m *TEBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TEBlock.Marshal(b, m, deterministic)
}
func (m *TEBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TEBlock.Merge(m, src)
}
func (m *TEBlock) XXX_Size() int {
	return xxx_messageInfo_TEBlock.Size(m)
}
func (m *TEBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_TEBlock.DiscardUnknown(m)
}

var xxx_messageInfo_TEBlock proto.InternalMessageInfo

func (m *TEBlock) GetLogID() int32 {
	if m != nil {
		return m.LogID
	}
	return 0
}

func (m *TEBlock) GetAcceptHash() []byte {
	if m != nil {
		return m.AcceptHash
	}
	return nil
}

func (m *TEBlock) GetTeSignature() []byte {
	if m != nil {
		return m.TeSignature
	}
	return nil
}

func (m *TEBlock) GetAcceptMsgs() []*AcceptMsg {
	if m != nil {
		return m.AcceptMsgs
	}
	return nil
}

type LogEntry struct {
	LogID                int32        `protobuf:"varint,1,opt,name=logID,proto3" json:"logID,omitempty"`
	Data                 *BlockInfo   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	TeCertificate        *Certificate `protobuf:"bytes,3,opt,name=teCertificate,proto3" json:"teCertificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{19}
}

func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry.Unmarshal(m, b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return xxx_messageInfo_LogEntry.Size(m)
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetLogID() int32 {
	if m != nil {
		return m.LogID
	}
	return 0
}

func (m *LogEntry) GetData() *BlockInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LogEntry) GetTeCertificate() *Certificate {
	if m != nil {
		return m.TeCertificate
	}
	return nil
}

type AcceptVoteCount struct {
	LogID                int32    `protobuf:"varint,1,opt,name=logID,proto3" json:"logID,omitempty"`
	Votes                []*Vote  `protobuf:"bytes,2,rep,name=votes,proto3" json:"votes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptVoteCount) Reset()         { *m = AcceptVoteCount{} }
func (m *AcceptVoteCount) String() string { return proto.CompactTextString(m) }
func (*AcceptVoteCount) ProtoMessage()    {}
func (*AcceptVoteCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{20}
}

func (m *AcceptVoteCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcceptVoteCount.Unmarshal(m, b)
}
func (m *AcceptVoteCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcceptVoteCount.Marshal(b, m, deterministic)
}
func (m *AcceptVoteCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptVoteCount.Merge(m, src)
}
func (m *AcceptVoteCount) XXX_Size() int {
	return xxx_messageInfo_AcceptVoteCount.Size(m)
}
func (m *AcceptVoteCount) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptVoteCount.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptVoteCount proto.InternalMessageInfo

func (m *AcceptVoteCount) GetLogID() int32 {
	if m != nil {
		return m.LogID
	}
	return 0
}

func (m *AcceptVoteCount) GetVotes() []*Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

type Vote struct {
	Node                 *NodeInfo `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	AcceptHash           []byte    `protobuf:"bytes,2,opt,name=acceptHash,proto3" json:"acceptHash,omitempty"`
	ReplicaSignature     []byte    `protobuf:"bytes,3,opt,name=replicaSignature,proto3" json:"replicaSignature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d23c5f8e671466, []int{21}
}

func (m *Vote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vote.Unmarshal(m, b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return xxx_messageInfo_Vote.Size(m)
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetNode() *NodeInfo {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Vote) GetAcceptHash() []byte {
	if m != nil {
		return m.AcceptHash
	}
	return nil
}

func (m *Vote) GetReplicaSignature() []byte {
	if m != nil {
		return m.ReplicaSignature
	}
	return nil
}

func init() {
	proto.RegisterEnum("lc.LogStatus", LogStatus_name, LogStatus_value)
	proto.RegisterEnum("lc.ResponseStatus", ResponseStatus_name, ResponseStatus_value)
	proto.RegisterType((*HeartBeatInfo)(nil), "lc.HeartBeatInfo")
	proto.RegisterType((*EdgeNodeConfig)(nil), "lc.EdgeNodeConfig")
	proto.RegisterType((*RegistrationConfig)(nil), "lc.RegistrationConfig")
	proto.RegisterType((*LeaderConfig)(nil), "lc.LeaderConfig")
	proto.RegisterType((*ProposeData)(nil), "lc.ProposeData")
	proto.RegisterType((*PrepareAck)(nil), "lc.PrepareAck")
	proto.RegisterType((*Dummy)(nil), "lc.Dummy")
	proto.RegisterType((*PublicKey)(nil), "lc.PublicKey")
	proto.RegisterType((*Data)(nil), "lc.Data")
	proto.RegisterType((*AcceptMsg)(nil), "lc.AcceptMsg")
	proto.RegisterType((*Header)(nil), "lc.Header")
	proto.RegisterType((*BlockInfo)(nil), "lc.BlockInfo")
	proto.RegisterType((*KeyVal)(nil), "lc.KeyVal")
	proto.RegisterType((*ReadResponse)(nil), "lc.ReadResponse")
	proto.RegisterType((*CommitData)(nil), "lc.CommitData")
	proto.RegisterType((*Certificate)(nil), "lc.Certificate")
	proto.RegisterType((*ViewInfo)(nil), "lc.ViewInfo")
	proto.RegisterType((*NodeInfo)(nil), "lc.NodeInfo")
	proto.RegisterType((*TEBlock)(nil), "lc.TEBlock")
	proto.RegisterType((*LogEntry)(nil), "lc.LogEntry")
	proto.RegisterType((*AcceptVoteCount)(nil), "lc.AcceptVoteCount")
	proto.RegisterType((*Vote)(nil), "lc.Vote")
}

func init() { proto.RegisterFile("lc.proto", fileDescriptor_44d23c5f8e671466) }

var fileDescriptor_44d23c5f8e671466 = []byte{
	// 1013 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4d, 0x6f, 0x1b, 0x37,
	0x13, 0x7e, 0x77, 0x2d, 0xc9, 0xda, 0xd1, 0x87, 0xf5, 0x12, 0x45, 0x60, 0xb8, 0x85, 0xa1, 0x32,
	0x29, 0x60, 0x3b, 0x8d, 0xd2, 0xba, 0x48, 0x7b, 0xb6, 0x25, 0xd5, 0x16, 0xec, 0x24, 0x02, 0xe5,
	0xba, 0x40, 0xd0, 0x0b, 0xbd, 0xa2, 0x37, 0x0b, 0x53, 0xe2, 0x62, 0x97, 0xb2, 0xe1, 0xde, 0x7a,
	0xe8, 0xa9, 0x97, 0xfe, 0x83, 0x02, 0x3d, 0xf6, 0xa7, 0xf4, 0x57, 0x15, 0xfc, 0xd8, 0x15, 0xd7,
	0x96, 0x92, 0x5e, 0x7a, 0x23, 0x67, 0x86, 0xc3, 0x99, 0xe7, 0x99, 0x19, 0x12, 0xea, 0x3c, 0xec,
	0x25, 0xa9, 0x90, 0x02, 0xf9, 0x3c, 0xc4, 0x5b, 0xd0, 0x3a, 0x65, 0x34, 0x95, 0xc7, 0x8c, 0xca,
	0xd1, 0xfc, 0x5a, 0xe0, 0x3b, 0x68, 0x0f, 0xa7, 0x11, 0x7b, 0x23, 0xa6, 0xac, 0x2f, 0xe6, 0xd7,
	0x71, 0x84, 0x9e, 0x43, 0x90, 0x2c, 0xae, 0x78, 0x1c, 0x9e, 0xb1, 0xfb, 0x6d, 0xaf, 0xeb, 0xed,
	0x35, 0x0e, 0x5b, 0x3d, 0x1e, 0xf6, 0xc6, 0xb9, 0x90, 0x2c, 0xf5, 0xa8, 0x0b, 0x95, 0xb9, 0x98,
	0xb2, 0x6d, 0x5f, 0xdb, 0x35, 0x95, 0x9d, 0x72, 0xa5, 0x5c, 0x13, 0xad, 0x41, 0x4f, 0xa0, 0x26,
	0x59, 0x3a, 0x1b, 0x0d, 0xb6, 0x37, 0xba, 0xde, 0x5e, 0x95, 0xd8, 0x1d, 0xfe, 0xc3, 0x03, 0x44,
	0x58, 0x14, 0x67, 0x32, 0xa5, 0x32, 0x16, 0x73, 0x7b, 0xfb, 0x4b, 0x68, 0x48, 0x36, 0xfe, 0xf0,
	0xfd, 0xae, 0x05, 0xfa, 0x16, 0x5a, 0x21, 0x5f, 0x64, 0x92, 0xa5, 0xe7, 0x8c, 0x4e, 0x59, 0x6a,
	0x43, 0xe9, 0xa8, 0x23, 0x46, 0x62, 0x3c, 0x93, 0xb2, 0x19, 0xea, 0x42, 0x83, 0x8b, 0x68, 0x2c,
	0xb2, 0x58, 0xdd, 0x6e, 0x83, 0x73, 0x45, 0xf8, 0x37, 0x0f, 0x9a, 0xae, 0x07, 0xd4, 0x06, 0x7f,
	0x34, 0xd0, 0x21, 0x05, 0xc4, 0x1f, 0x0d, 0x9c, 0xd4, 0x7c, 0x37, 0xb5, 0x02, 0x94, 0x8d, 0xb5,
	0xa0, 0x7c, 0x0d, 0x4d, 0xae, 0x3d, 0x8f, 0x17, 0x57, 0x2a, 0xcd, 0xca, 0xaa, 0x34, 0x4b, 0x26,
	0xf8, 0x27, 0x68, 0x8c, 0x53, 0x91, 0x88, 0x8c, 0x0d, 0xa8, 0xa4, 0x08, 0x43, 0xed, 0xbd, 0xc9,
	0xd7, 0x40, 0x04, 0xea, 0xec, 0xa9, 0x96, 0x10, 0xab, 0x41, 0xfb, 0x50, 0xe7, 0x22, 0x3a, 0xe6,
	0x22, 0xbc, 0xb1, 0xa8, 0xe8, 0x1b, 0xb4, 0x40, 0x07, 0x53, 0xa8, 0xf1, 0x77, 0x00, 0xe3, 0x94,
	0x25, 0x34, 0x65, 0x47, 0xe1, 0x0d, 0xda, 0x87, 0xcd, 0xc4, 0xec, 0xac, 0xf7, 0x2d, 0x1d, 0xd9,
	0xf2, 0x7a, 0x92, 0xeb, 0xf1, 0x26, 0x54, 0x07, 0x8b, 0xd9, 0xec, 0x1e, 0xbf, 0x84, 0x60, 0x49,
	0x0a, 0x86, 0x66, 0x4a, 0xef, 0xca, 0x34, 0x36, 0x49, 0x49, 0x86, 0x77, 0xa0, 0xa2, 0x33, 0x41,
	0x50, 0x99, 0x52, 0x49, 0xad, 0x8d, 0x5e, 0xe3, 0xbf, 0x3c, 0x08, 0x8e, 0xc2, 0x90, 0x25, 0xf2,
	0x75, 0x16, 0xfd, 0xab, 0x5c, 0x77, 0x01, 0xa8, 0x3e, 0x70, 0x4a, 0xb3, 0xf7, 0x3a, 0xdb, 0x26,
	0x71, 0x24, 0xe8, 0x33, 0x08, 0xb2, 0x38, 0x9a, 0x53, 0xb9, 0x48, 0x0d, 0x31, 0x4d, 0xb2, 0x14,
	0xa0, 0xa7, 0x50, 0xbd, 0xd2, 0x30, 0x55, 0x56, 0xc1, 0x64, 0x74, 0x0e, 0xdd, 0xd5, 0x52, 0x25,
	0x1f, 0x40, 0xed, 0x34, 0xaf, 0xa9, 0x8f, 0x74, 0x03, 0x3e, 0x82, 0xa0, 0xf0, 0x8b, 0x3e, 0x81,
	0x2a, 0x17, 0x91, 0x2d, 0xa9, 0x2a, 0x31, 0x1b, 0xb4, 0x6b, 0xf1, 0xf0, 0xbb, 0x1b, 0x79, 0xae,
	0x67, 0xec, 0xfe, 0x92, 0x72, 0x8b, 0xcd, 0x57, 0x50, 0x33, 0x7b, 0xd4, 0x81, 0x8d, 0x9b, 0x02,
	0x5c, 0xb5, 0x54, 0x1e, 0x6f, 0x29, 0x5f, 0x30, 0x0b, 0x80, 0xd9, 0xe0, 0x77, 0xd0, 0x24, 0x8c,
	0x4e, 0x09, 0xcb, 0x12, 0x31, 0xcf, 0x58, 0x71, 0x83, 0x83, 0xa6, 0x7b, 0x03, 0x3a, 0x80, 0x5a,
	0x26, 0xa9, 0x5c, 0x64, 0xda, 0x4d, 0xfb, 0x10, 0x29, 0x8b, 0xfc, 0xf4, 0x44, 0x6b, 0x88, 0xb5,
	0xc0, 0x5f, 0x02, 0xf4, 0xc5, 0x6c, 0x16, 0x4b, 0xcd, 0xe5, 0xd2, 0xf3, 0xea, 0xd8, 0x7f, 0xf5,
	0xa0, 0xd1, 0x67, 0xa9, 0x8c, 0xaf, 0xe3, 0x90, 0x4a, 0xb6, 0x16, 0x81, 0x0f, 0x73, 0xd9, 0x55,
	0x33, 0x62, 0xf2, 0x80, 0x4d, 0x57, 0x84, 0x76, 0xa1, 0x7a, 0x2b, 0x24, 0xcb, 0xb6, 0x2b, 0x3a,
	0x90, 0xba, 0x0a, 0xe4, 0x52, 0x48, 0x46, 0x8c, 0x18, 0x9f, 0x42, 0xfd, 0x32, 0x66, 0x77, 0x9a,
	0x85, 0x67, 0x50, 0xe3, 0x6e, 0x75, 0x95, 0x69, 0xb3, 0x3a, 0x45, 0xfe, 0xad, 0x3a, 0x51, 0x8c,
	0x31, 0xb3, 0xc3, 0x3d, 0xa8, 0xe7, 0xb6, 0x6a, 0x3e, 0xc4, 0x49, 0x3e, 0x1f, 0xe2, 0x44, 0x55,
	0x76, 0x22, 0x52, 0xa9, 0x33, 0x08, 0x88, 0x5e, 0xe3, 0xdf, 0x3d, 0xd8, 0xbc, 0x18, 0xea, 0x1a,
	0xf8, 0xcf, 0xb2, 0x7f, 0x91, 0x7b, 0x78, 0x9d, 0x45, 0x39, 0x04, 0xba, 0xa4, 0x8b, 0x96, 0x22,
	0x8e, 0x01, 0xfe, 0x19, 0xea, 0xe7, 0x22, 0x1a, 0xce, 0x65, 0x7a, 0xbf, 0x26, 0xa4, 0xcf, 0x8b,
	0x92, 0x5c, 0xd1, 0x1d, 0xa6, 0x66, 0x5e, 0x41, 0x4b, 0x32, 0x87, 0x5a, 0x3b, 0xfc, 0xf4, 0xe0,
	0x70, 0xc4, 0xa4, 0x6c, 0x85, 0x4f, 0x60, 0xcb, 0x04, 0xa5, 0xd8, 0xe9, 0x8b, 0xc5, 0x5c, 0xae,
	0x45, 0xc5, 0x32, 0xea, 0xaf, 0x66, 0x54, 0x42, 0x45, 0x6d, 0x8b, 0x16, 0xf4, 0xd6, 0xce, 0xde,
	0x8f, 0xe1, 0x7b, 0x00, 0x9d, 0x94, 0x25, 0x3c, 0x0e, 0xe9, 0x43, 0x90, 0x1f, 0xc9, 0x0f, 0x5e,
	0x41, 0x70, 0x2e, 0x22, 0xd3, 0x12, 0xa8, 0x05, 0x41, 0x7f, 0x48, 0x2e, 0x46, 0xdf, 0x8f, 0x86,
	0x83, 0xce, 0xff, 0x50, 0x03, 0x36, 0x7f, 0x3c, 0x1a, 0x5d, 0x8c, 0xde, 0x9c, 0x74, 0x3c, 0xd4,
	0x84, 0x3a, 0x79, 0x7b, 0x7e, 0x7e, 0x7c, 0xd4, 0x3f, 0xeb, 0xf8, 0x07, 0x7b, 0xd0, 0x2e, 0xb7,
	0x13, 0x0a, 0xa0, 0x3a, 0x24, 0xe4, 0x2d, 0x31, 0xe7, 0x26, 0x3f, 0xf4, 0xfb, 0xc3, 0xc9, 0xa4,
	0xe3, 0x1d, 0xfe, 0xe2, 0x43, 0x3d, 0x7f, 0x9f, 0xd1, 0x53, 0xa8, 0x99, 0x5e, 0x43, 0x6d, 0x0d,
	0x6b, 0xd1, 0x77, 0x3b, 0x81, 0xda, 0xeb, 0x39, 0x8c, 0x9e, 0x41, 0x45, 0x35, 0x3b, 0x72, 0x9a,
	0x6f, 0xa7, 0x63, 0x1a, 0xd8, 0x19, 0x01, 0x5f, 0xc0, 0xa6, 0x1d, 0xe7, 0xe8, 0xe1, 0x6c, 0x77,
	0x9d, 0xed, 0x43, 0x50, 0x7c, 0x17, 0xd0, 0xff, 0xed, 0xd8, 0x5d, 0xfe, 0x1e, 0x5c, 0xd3, 0xe7,
	0xd0, 0x5a, 0x12, 0x1b, 0x8b, 0x39, 0x7a, 0x48, 0x7d, 0xd9, 0xd8, 0xbe, 0xac, 0x36, 0xfd, 0x47,
	0xaf, 0xb5, 0x63, 0x7c, 0xf8, 0xb7, 0x07, 0xad, 0x8b, 0x54, 0xbd, 0xdd, 0xd3, 0xe1, 0x5c, 0xc6,
	0x52, 0xbd, 0xf9, 0x75, 0xf3, 0x75, 0x60, 0x29, 0xd2, 0xc3, 0xa9, 0xfc, 0x85, 0xd9, 0x79, 0x62,
	0xf2, 0x7d, 0xf4, 0xb9, 0xc0, 0x50, 0x33, 0xd5, 0x86, 0xca, 0xed, 0xe0, 0x86, 0xf6, 0x02, 0xda,
	0x27, 0x4c, 0xba, 0x43, 0xca, 0x79, 0x6e, 0x76, 0x1e, 0x26, 0x85, 0x7a, 0xd0, 0x9a, 0x30, 0x7e,
	0x3d, 0x4e, 0xc5, 0x4c, 0xe8, 0xb4, 0x57, 0xc5, 0xb3, 0x74, 0x7f, 0xfc, 0x29, 0x00, 0x9b, 0x46,
	0x8c, 0xd3, 0xab, 0x1e, 0x0f, 0x8f, 0x7d, 0x1e, 0x8e, 0xbd, 0x77, 0x3e, 0x0f, 0xff, 0xf4, 0x7d,
	0x1e, 0x5e, 0xd5, 0xf4, 0x47, 0xed, 0x9b, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x7e, 0xb3,
	0x87, 0xb4, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EdgeNodeClient is the client API for EdgeNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EdgeNodeClient interface {
	Commit(ctx context.Context, in *CommitData, opts ...grpc.CallOption) (*Dummy, error)
	Read(ctx context.Context, in *KeyVal, opts ...grpc.CallOption) (*ReadResponse, error)
	Propose(ctx context.Context, in *ProposeData, opts ...grpc.CallOption) (*Dummy, error)
	HeartBeat(ctx context.Context, in *HeartBeatInfo, opts ...grpc.CallOption) (*Dummy, error)
	Certification(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Dummy, error)
	LeaderStatus(ctx context.Context, in *LeaderConfig, opts ...grpc.CallOption) (*Dummy, error)
}

type edgeNodeClient struct {
	cc *grpc.ClientConn
}

func NewEdgeNodeClient(cc *grpc.ClientConn) EdgeNodeClient {
	return &edgeNodeClient{cc}
}

func (c *edgeNodeClient) Commit(ctx context.Context, in *CommitData, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := c.cc.Invoke(ctx, "/lc.EdgeNode/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNodeClient) Read(ctx context.Context, in *KeyVal, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/lc.EdgeNode/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNodeClient) Propose(ctx context.Context, in *ProposeData, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := c.cc.Invoke(ctx, "/lc.EdgeNode/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNodeClient) HeartBeat(ctx context.Context, in *HeartBeatInfo, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := c.cc.Invoke(ctx, "/lc.EdgeNode/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNodeClient) Certification(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := c.cc.Invoke(ctx, "/lc.EdgeNode/Certification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNodeClient) LeaderStatus(ctx context.Context, in *LeaderConfig, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := c.cc.Invoke(ctx, "/lc.EdgeNode/LeaderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EdgeNodeServer is the server API for EdgeNode service.
type EdgeNodeServer interface {
	Commit(context.Context, *CommitData) (*Dummy, error)
	Read(context.Context, *KeyVal) (*ReadResponse, error)
	Propose(context.Context, *ProposeData) (*Dummy, error)
	HeartBeat(context.Context, *HeartBeatInfo) (*Dummy, error)
	Certification(context.Context, *Certificate) (*Dummy, error)
	LeaderStatus(context.Context, *LeaderConfig) (*Dummy, error)
}

func RegisterEdgeNodeServer(s *grpc.Server, srv EdgeNodeServer) {
	s.RegisterService(&_EdgeNode_serviceDesc, srv)
}

func _EdgeNode_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNodeServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.EdgeNode/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNodeServer).Commit(ctx, req.(*CommitData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNode_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyVal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNodeServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.EdgeNode/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNodeServer).Read(ctx, req.(*KeyVal))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNode_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNodeServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.EdgeNode/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNodeServer).Propose(ctx, req.(*ProposeData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNode_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNodeServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.EdgeNode/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNodeServer).HeartBeat(ctx, req.(*HeartBeatInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNode_Certification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Certificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNodeServer).Certification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.EdgeNode/Certification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNodeServer).Certification(ctx, req.(*Certificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNode_LeaderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNodeServer).LeaderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.EdgeNode/LeaderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNodeServer).LeaderStatus(ctx, req.(*LeaderConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _EdgeNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lc.EdgeNode",
	HandlerType: (*EdgeNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Commit",
			Handler:    _EdgeNode_Commit_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _EdgeNode_Read_Handler,
		},
		{
			MethodName: "Propose",
			Handler:    _EdgeNode_Propose_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _EdgeNode_HeartBeat_Handler,
		},
		{
			MethodName: "Certification",
			Handler:    _EdgeNode_Certification_Handler,
		},
		{
			MethodName: "LeaderStatus",
			Handler:    _EdgeNode_LeaderStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lc.proto",
}

// TrustedEntityClient is the client API for TrustedEntity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrustedEntityClient interface {
	Register(ctx context.Context, in *EdgeNodeConfig, opts ...grpc.CallOption) (*RegistrationConfig, error)
	Accept(ctx context.Context, in *AcceptMsg, opts ...grpc.CallOption) (*Dummy, error)
	//    rpc GetPublicKey (Dummy) returns (PublicKey);
	GetCertificate(ctx context.Context, in *Header, opts ...grpc.CallOption) (*Certificate, error)
	SelfPromotion(ctx context.Context, in *EdgeNodeConfig, opts ...grpc.CallOption) (*Dummy, error)
}

type trustedEntityClient struct {
	cc *grpc.ClientConn
}

func NewTrustedEntityClient(cc *grpc.ClientConn) TrustedEntityClient {
	return &trustedEntityClient{cc}
}

func (c *trustedEntityClient) Register(ctx context.Context, in *EdgeNodeConfig, opts ...grpc.CallOption) (*RegistrationConfig, error) {
	out := new(RegistrationConfig)
	err := c.cc.Invoke(ctx, "/lc.TrustedEntity/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedEntityClient) Accept(ctx context.Context, in *AcceptMsg, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := c.cc.Invoke(ctx, "/lc.TrustedEntity/Accept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedEntityClient) GetCertificate(ctx context.Context, in *Header, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, "/lc.TrustedEntity/GetCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedEntityClient) SelfPromotion(ctx context.Context, in *EdgeNodeConfig, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := c.cc.Invoke(ctx, "/lc.TrustedEntity/SelfPromotion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustedEntityServer is the server API for TrustedEntity service.
type TrustedEntityServer interface {
	Register(context.Context, *EdgeNodeConfig) (*RegistrationConfig, error)
	Accept(context.Context, *AcceptMsg) (*Dummy, error)
	//    rpc GetPublicKey (Dummy) returns (PublicKey);
	GetCertificate(context.Context, *Header) (*Certificate, error)
	SelfPromotion(context.Context, *EdgeNodeConfig) (*Dummy, error)
}

func RegisterTrustedEntityServer(s *grpc.Server, srv TrustedEntityServer) {
	s.RegisterService(&_TrustedEntity_serviceDesc, srv)
}

func _TrustedEntity_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeNodeConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedEntityServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.TrustedEntity/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedEntityServer).Register(ctx, req.(*EdgeNodeConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedEntity_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedEntityServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.TrustedEntity/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedEntityServer).Accept(ctx, req.(*AcceptMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedEntity_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Header)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedEntityServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.TrustedEntity/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedEntityServer).GetCertificate(ctx, req.(*Header))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedEntity_SelfPromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeNodeConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedEntityServer).SelfPromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.TrustedEntity/SelfPromotion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedEntityServer).SelfPromotion(ctx, req.(*EdgeNodeConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrustedEntity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lc.TrustedEntity",
	HandlerType: (*TrustedEntityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _TrustedEntity_Register_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _TrustedEntity_Accept_Handler,
		},
		{
			MethodName: "GetCertificate",
			Handler:    _TrustedEntity_GetCertificate_Handler,
		},
		{
			MethodName: "SelfPromotion",
			Handler:    _TrustedEntity_SelfPromotion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lc.proto",
}
