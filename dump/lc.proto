syntax = "proto3";


option java_multiple_files = true;
option java_package = "edgelab.lc";
option java_outer_classname = "lc";
option objc_class_prefix = "lc";
option go_package = "lc";
package lc;


service EdgeNode {
    rpc Commit (KeyVal) returns (Dummy);
    rpc Read (KeyVal) returns (KeyVal);
    rpc Propose (ProposeData) returns (Dummy);
    rpc HeartBeat (HeartBeatInfo) returns (Dummy);
    rpc Certification (Certificate) returns (Dummy);
    rpc LeaderStatus (LeaderConfig) returns (Dummy);
}

service TrustedEntity {
    rpc Register (EdgeNodeConfig) returns (RegistrationConfig);
    rpc Accept (AcceptMsg) returns (Dummy);
    //    rpc GetPublicKey (Dummy) returns (PublicKey);
    rpc GetCertificate (Header) returns (Certificate);
    rpc SelfPromotion (EdgeNodeConfig) returns (Dummy);

}

message HeartBeatInfo {

}

message EdgeNodeConfig {
    PublicKey publicKey = 1;
    NodeInfo node = 2;
    int32 termID = 3;
}

message RegistrationConfig {
    PublicKey tePublicKey = 1;
    LeaderConfig clusterLeader = 2;
    int32 logPosition = 3;

}
message LeaderConfig {
    string ID =1;
    int32 termID = 2;
    NodeInfo node = 3;
    PublicKey leaderPubKey = 4;
}

message ProposeData {
    Header header = 1;
    BlockInfo logBlock = 2;
}

message PrepareAck {
    ProposeData prepare = 1;
    //    bytes signature = 2;
}

message Dummy {
}

message PublicKey {
    bytes rawPublicKey = 1;
}

message Data {
    bytes data = 1;
}
/*message Accept {
    Header header = 1;
    BlockInfo block = 2;
    //    bytes signature = 3;
}*/
message AcceptMsg {
    Header header = 1;
    bytes acceptHash = 2;
    bytes signature = 3;
    BlockInfo block  = 4;
    int32 termID = 5;
}

message Header {
    NodeInfo node = 2;

}

message BlockInfo {
    int32 logID = 1;
    repeated KeyVal data = 2;
}

message KeyVal {
    bytes key = 1;
    bytes value = 2;
}

message Certificate {
    int32 logID = 1;
    bytes acceptHash = 2;
    bytes teSignature = 3;
    repeated Vote votes = 4;
}

message ViewInfo {
    NodeInfo leader = 1;
    int32 viewID = 3;
}

message NodeInfo {
    string ip = 1;
    string port = 2;
}

message TEBlock {
    int32 logID = 1;
    bytes acceptHash = 2;
    bytes teSignature = 3;
    repeated AcceptMsg acceptMsgs = 4;
}

message LogEntry {
    int32 logID = 1;
    BlockInfo data = 2;
    Certificate teCertificate = 3;
}
message AcceptVoteCount {
    int32 logID = 1;
    repeated Vote votes = 2;
}

message Vote {
    NodeInfo node = 1;
    bytes acceptHash = 2;
    bytes replicaSignature = 3;
}